/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. CMaisMenos.jj */
/*@egen*/options
{
  static = true;
}

PARSER_BEGIN(CMaisMenos)
package compilador;
import recovery.*;

public class CMaisMenos/*@bgen(jjtree)*/implements CMaisMenosTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected static JJTCMaisMenosState jjtree = new JJTCMaisMenosState();

/*@egen*/
  public static void main(String args []) throws ParseException
  {
    CMaisMenos parser = new CMaisMenos(System.in);
    while (true)
    {
      System.out.println("Escreve alguma coisa ai");
      System.out.print("Escreve tipo: nascoxas algo tipoassim maisoumenos isso euacho");
      System.out.println(" ");

	  SimpleNode node = CMaisMenos.main();
      System.out.println("A arvore do programa ficou assim:");
      node.dump(" -> ");
      try
      {
          System.out.println(" ");
          System.out.println("Pode ser.");
        /*switch (CMaisMenos.main())
        {
          case 0 : 
          break;
          case 1 : 
          System.out.println("Vai pela sombra.");
          break;
          default : 
          break;
        }*/
      }
      catch (Exception e)
      {
        System.out.println(" ");
        System.out.println("Acho que n\u00e3o.");
        System.out.println(e.getMessage());
        CMaisMenos.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("PUTZ.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }

	static public String im(int x)
  {
    int k;
	String s;
    s = tokenImage[x];
    k = s.lastIndexOf("\"");
    try {
      s = s.substring(1,k);
    }
   catch (StringIndexOutOfBoundsException e)
	   {}
   return s;
  }
	
  static public  Token lastError = null;
  static public  Token firstErrorToken = null;
  static boolean eof ;    // vari\u00e1vel que indica se EOF foi alcan\u00e7ado
	
  // o m\u00e9todo abaixo consome tokens at\u00e9 alcan\u00e7ar um que perten\u00e7a ao conjunto
  // de sincroniza\u00e7\u00e3o
  static void consumeUntil(RecoverySet g,
	                 ParseException e,
	                 String met) throws ParseEOFException,
	                                    ParseException
  {
	Token tok;
	System.out.println();
	System.out.println("*** " + met + " ***");
	System.out.println("     Conjunto de sincroniza\u00e7\u00e3o: " + g);
		
	if (g == null) throw e; // se o conjunto \u00e9 null, propaga a exce\u00e7\u00e3o
	
	tok = getToken(1); // pega token corrente
	if (firstErrorToken == null) {
        firstErrorToken = tok; // armazena o primeiro token do erro
    }
	while ( ! eof )	{ // se n\u00e3o chegou ao fim do arquivo
	  if ( g.contains(tok.kind)) {//achou um token no conjunto
	    System.out.println("     Encontrado token de sincroniza\u00e7\u00e3o: " + 
	                       im(tok.kind));
	    break;
	  }
	  System.out.println("     Ignorando o token: " + im(tok.kind));
	  getNextToken();     // pega pr\u00f3ximo token       
      tok = getToken(1);
	  if (tok.kind == EOF && ! g.contains(EOF) ) // fim da entrada?   
	      eof = true;
	}
    if ( tok != lastError)  {
	  System.out.println(e.getMessage());
	  lastError = tok;
	   
	}
	if ( eof )
	  throw new ParseEOFException("Encontrei EOF onde n\u00e3o deveria.");
  }

  
}

PARSER_END(CMaisMenos)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : 
{
  // tokens gerais
    < INICIOPROGRAMA : "nascoxas" >
  | < PONTOVIRGULA : ";" >
  | < VIRGULA : "," >
  | < ABREBLOCO : "tipoisso" >
  | < FECHABLOCO : "euacho" >
  | < ABREPAR : "(" >
  | < FECHAPAR : ")" >
  | < TIPOINTEIRO : "poucacoisa" >
  | < TIPOFLOAT : "falouedisse" >
  | < TIPOBOOL : "maisoumenos" >
  | < SEPA : "sepa" >
  | < ACONTECE : "acontece" >
  | < VAINAFE : "vainafe" >

  | < DECIMAL : ( < DIGITO >)+  >
  | < #DIGITO : [ "0"-"9" ] >

  | < ID : < LETRA > (< LETRA > | < DIGITO >)* >
  | < #LETRA : [ "A"-"Z" ] | [ "a"-"z" ] >

  // Operadores l\u00f3gicos
  | < IGUAL_LOG   : "==" | "== " | " ==" | " == " > // TODAS AS VARIACOES DE ESPACOS
  | < DIFERENTE   : "!=" | "!= " | " !=" | " != " >
  | < MENOR_IGUAL : "<=" | "<= " | " <=" | " <= " >
  | < MAIOR_IGUAL : ">=" | ">= " | " >=" | " >= " >
  | < MENOR 	  : "<"  | "< "  | " <"  | " < " >
  | < MAIOR 	  : ">"  | "> "  | " >"  | " > " > 


  // Operadores de incremento e atribui\u00e7\u00e3o composta
  | < INCREMENTO  : "++" | "++ " | " ++" | " ++ " >
  | < DECREMENTO  : "--" | "-- " | " --" | " -- " >
  | < MAIS_IGUAL  : "+=" | "+= " | " +=" | " += " >
  | < MENOS_IGUAL : "-=" | "-= " | " -=" | " -= " >

  // Operadores matem\u00e1ticos (deixe por \u00faltimo para evitar conflito)
  | < MAIS    : "+" | "+ " | " +" | " + " >
  | < MENOS   : "-" | "- " | " -" | " - " >
  | < MULTI   : "*" | "* " | " *" | " * " >
  | < DIVISAO : "/" | "/ " | " /" | " / " >
  | < IGUAL   : "=" | "= " | " =" | " = " >
}

SimpleNode main() :
{/*@bgen(jjtree) main */
 SimpleNode jjtn000 = new SimpleNode(JJTMAIN);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet sinc = Follow.main;}
{/*@bgen(jjtree) main */
  try {
/*@egen*/
  try 
  {
	  NasCoxas() //INICIOPROGRAMA
	  Id() //ID
	  TipoIsso() //ABREBLOCO
	  Comandos()
	  EuAcho() //FECHABLOCO

	  { return jjtn000; } 
  } 
  catch (ParseException e) 
  {
    consumeUntil(sinc, e, "Main");
    return null;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/

}

void Comandos() :
{/*@bgen(jjtree) Comandos */
 SimpleNode jjtn000 = new SimpleNode(JJTCOMANDOS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet sinc = Follow.comandos;}
{/*@bgen(jjtree) Comandos */
  try {
/*@egen*/
  try
  {
	  (   DeclaraVariavel()
	   	| AtribuiValor()
	   	| If()
	   	| While()
	   	| For()
	  )*
  }
  catch (ParseException e)
  {
    consumeUntil(sinc, e, "Comandos");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void DeclaraVariavel() :
{/*@bgen(jjtree) DeclaraVariavel */
 SimpleNode jjtn000 = new SimpleNode(JJTDECLARAVARIAVEL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet sinc = Follow.declaraVariavel;}
{/*@bgen(jjtree) DeclaraVariavel */
  try {
/*@egen*/
  try
  {  
	 TipoVariavel() 
	 Id() ( Igual() Expressao() )? ( Virgula() Id() ( Igual() Expressao() )? )* PontoVirgula()
  }
  catch( ParseException e)
  {
    consumeUntil(sinc, e, "Declara\u00e7\u00e3o de vari\u00e1vel");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void DeclaraVariavelFor() : 
{/*@bgen(jjtree) DeclaraVariavelFor */
 SimpleNode jjtn000 = new SimpleNode(JJTDECLARAVARIAVELFOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet sinc = Follow.declaraVariavelFor;}
{/*@bgen(jjtree) DeclaraVariavelFor */
  try {
/*@egen*/
  try
  {
	 TipoVariavel() 
	 Id() ( Igual() Expressao() )? 
  }
  catch( ParseException e)
  {
    consumeUntil(sinc, e, "Declara\u00e7\u00e3o de vari\u00e1vel para for");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void TipoVariavel() : 
{/*@bgen(jjtree) TipoVariavel */
 SimpleNode jjtn000 = new SimpleNode(JJTTIPOVARIAVEL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet sinc = Follow.tipoVariavel;}
{/*@bgen(jjtree) TipoVariavel */
  try {
/*@egen*/
  try
  {
      PoucaCoisa() // TIPOINTEIRO
    | FaloueDisse() // TIPOFLOAT
    | MaisOuMenos() // TIPOBOOL
  }
  catch( ParseException e)
  {
    consumeUntil(sinc, e, "Tipo de vari\u00e1vel");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void OperadorMatematico(): 
{/*@bgen(jjtree) OperadorMatematico */
 SimpleNode jjtn000 = new SimpleNode(JJTOPERADORMATEMATICO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet sinc = Follow.operadorMatematico;}
{/*@bgen(jjtree) OperadorMatematico */
  try {
/*@egen*/
  try
  {
      Mais()
    | Menos()
    | Multiplicado()
    | Dividido()
  }
  catch (ParseException e)
  {
    consumeUntil(sinc, e, "Operador matem\u00e1tico");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void OperadorLogico(): 
{/*@bgen(jjtree) OperadorLogico */
 SimpleNode jjtn000 = new SimpleNode(JJTOPERADORLOGICO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet sinc = Follow.operadorLogico;}
{/*@bgen(jjtree) OperadorLogico */
  try {
/*@egen*/
  try
  {
      IgualIgual()
    | Diferente()
    | MenorIgual()
    | MaiorIgual()
    | Menor()
    | Maior()
  }
  catch (ParseException e)
  {
    consumeUntil(sinc, e, "Operador l\u00f3gico");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Expressao() :
{/*@bgen(jjtree) Expressao */
 SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSAO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet sinc = Follow.expressao;}
{/*@bgen(jjtree) Expressao */
  try {
/*@egen*/
  try
  {
    Termo() ( OperadorMatematico() Termo() )*
  }
  catch (ParseException e)
  {
    consumeUntil(sinc, e, "Express\u00e3o matem\u00e1tica");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ExpressaoLogica() :
{/*@bgen(jjtree) ExpressaoLogica */
 SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSAOLOGICA);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet sinc = Follow.expressaoLogica;}
{/*@bgen(jjtree) ExpressaoLogica */
  try {
/*@egen*/
  try
  {
    Expressao() OperadorLogico() Expressao()
  }
  catch (ParseException e)
  {
    consumeUntil(sinc, e, "Express\u00e3o l\u00f3gica");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void Termo() :
{/*@bgen(jjtree) Termo */
 SimpleNode jjtn000 = new SimpleNode(JJTTERMO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet sinc = Follow.termo;}
{/*@bgen(jjtree) Termo */
  try {
/*@egen*/
  try
  {
      AbrePar() Expressao() FechaPar()
    | Menos() Termo()
    | Id()
    | Numero()
  }
  catch (ParseException e)
  {
    consumeUntil(sinc, e, "Termo");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void AtribuiValor() :
{/*@bgen(jjtree) AtribuiValor */
 SimpleNode jjtn000 = new SimpleNode(JJTATRIBUIVALOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet sinc = Follow.atribuiValor;}
{/*@bgen(jjtree) AtribuiValor */
  try {
/*@egen*/
  try
  {
    Id() ( Igual() | MaisIgual() | MenosIgual() ) Expressao() PontoVirgula()
  }
  catch (ParseException e)
  {
    consumeUntil(sinc, e, "Atribui\u00e7\u00e3o de valor");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void If() : // sepa(a<b){ comandos }
{/*@bgen(jjtree) If */
 SimpleNode jjtn000 = new SimpleNode(JJTIF);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet sinc = Follow.sepaIf;}
{/*@bgen(jjtree) If */
  try {
/*@egen*/
  try
  { 
    Sepa() AbrePar() ExpressaoLogica() FechaPar() TipoIsso() Comandos() EuAcho()
  }
  catch (ParseException e)
  {
    consumeUntil(sinc, e, "Sepa");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void While() : 
{/*@bgen(jjtree) While */
 SimpleNode jjtn000 = new SimpleNode(JJTWHILE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet sinc = Follow.aconteceWhile;}
{/*@bgen(jjtree) While */
  try {
/*@egen*/
  try
  {
    Acontece() AbrePar() ExpressaoLogica() FechaPar() TipoIsso() Comandos() EuAcho()
  }
  catch (ParseException e)
  {
    consumeUntil(sinc, e, "Acontece");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void For() : 
{/*@bgen(jjtree) For */
 SimpleNode jjtn000 = new SimpleNode(JJTFOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet sinc = Follow.vainafeFor;}
{/*@bgen(jjtree) For */
  try {
/*@egen*/
  try
  {
    Vainafe() AbrePar() (DeclaraVariavelFor() | Id()) PontoVirgula() ExpressaoLogica() PontoVirgula()
    IncrementoOuDecremento() FechaPar() TipoIsso() Comandos() EuAcho()
  }
  catch (ParseException e)
  {
    consumeUntil(sinc, e, "Vainafe");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void IncrementoOuDecremento() :
{/*@bgen(jjtree) IncrementoOuDecremento */
 SimpleNode jjtn000 = new SimpleNode(JJTINCREMENTOOUDECREMENTO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/RecoverySet sinc = Follow.incDec;}
{/*@bgen(jjtree) IncrementoOuDecremento */
  try {
/*@egen*/
  try
  {
    Id() ( MaisMais() | MenosMenos() | MaisIgual() Expressao() | MenosIgual() Expressao() )
  }
  catch (ParseException e)
  {
    consumeUntil(sinc, e, "Incremento ou Decremento");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
 
// SEM FOLLOW A PARTIR DAQUI
// METODO PRA CADA TOKEN PRA ARVORE
// N\u00c3O \u00c9 A MANEIRA CORRETA E MAIS EFICIENTE MAS PARA FINS DE VISUALIZA\u00c7\u00c3O SERVE

void NasCoxas() : {/*@bgen(jjtree) NasCoxas */
  SimpleNode jjtn000 = new SimpleNode(JJTNASCOXAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NasCoxas */
  try {
/*@egen*/
  < INICIOPROGRAMA >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void PontoVirgula() : {/*@bgen(jjtree) PontoVirgula */
  SimpleNode jjtn000 = new SimpleNode(JJTPONTOVIRGULA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PontoVirgula */
  try {
/*@egen*/
  < PONTOVIRGULA >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Virgula() : {/*@bgen(jjtree) Virgula */
  SimpleNode jjtn000 = new SimpleNode(JJTVIRGULA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Virgula */
  try {
/*@egen*/
  < VIRGULA >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void TipoIsso() : {/*@bgen(jjtree) TipoIsso */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPOISSO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TipoIsso */
  try {
/*@egen*/
  < ABREBLOCO >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void EuAcho() : {/*@bgen(jjtree) EuAcho */
  SimpleNode jjtn000 = new SimpleNode(JJTEUACHO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) EuAcho */
  try {
/*@egen*/
  < FECHABLOCO >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void AbrePar() : {/*@bgen(jjtree) AbrePar */
  SimpleNode jjtn000 = new SimpleNode(JJTABREPAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AbrePar */
        try {
/*@egen*/
	< ABREPAR >/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void FechaPar() : {/*@bgen(jjtree) FechaPar */
  SimpleNode jjtn000 = new SimpleNode(JJTFECHAPAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FechaPar */
        try {
/*@egen*/
	< FECHAPAR >/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Igual() : {/*@bgen(jjtree) Igual */
  SimpleNode jjtn000 = new SimpleNode(JJTIGUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Igual */
        try {
/*@egen*/
	< IGUAL >/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Sepa() : {/*@bgen(jjtree) Sepa */
  SimpleNode jjtn000 = new SimpleNode(JJTSEPA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Sepa */
        try {
/*@egen*/
	< SEPA >/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Acontece() : {/*@bgen(jjtree) Acontece */
  SimpleNode jjtn000 = new SimpleNode(JJTACONTECE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Acontece */
        try {
/*@egen*/
	< ACONTECE >/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Vainafe() : {/*@bgen(jjtree) Vainafe */
  SimpleNode jjtn000 = new SimpleNode(JJTVAINAFE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Vainafe */
        try {
/*@egen*/
	< VAINAFE >/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Id() : {/*@bgen(jjtree) Id */
  SimpleNode jjtn000 = new SimpleNode(JJTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Id */
  try {
/*@egen*/
  < ID >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Menos() : {/*@bgen(jjtree) Menos */
  SimpleNode jjtn000 = new SimpleNode(JJTMENOS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Menos */
  try {
/*@egen*/
  < MENOS >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void PoucaCoisa() : {/*@bgen(jjtree) PoucaCoisa */
  SimpleNode jjtn000 = new SimpleNode(JJTPOUCACOISA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PoucaCoisa */
  try {
/*@egen*/
  < TIPOINTEIRO >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void FaloueDisse() : {/*@bgen(jjtree) FaloueDisse */
  SimpleNode jjtn000 = new SimpleNode(JJTFALOUEDISSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) FaloueDisse */
  try {
/*@egen*/
  < TIPOFLOAT >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void MaisOuMenos() : {/*@bgen(jjtree) MaisOuMenos */
  SimpleNode jjtn000 = new SimpleNode(JJTMAISOUMENOS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MaisOuMenos */
  try {
/*@egen*/
  < TIPOBOOL >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Mais() : {/*@bgen(jjtree) Mais */
  SimpleNode jjtn000 = new SimpleNode(JJTMAIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Mais */
  try {
/*@egen*/
  < MAIS >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Multiplicado() : {/*@bgen(jjtree) Multiplicado */
  SimpleNode jjtn000 = new SimpleNode(JJTMULTIPLICADO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Multiplicado */
  try {
/*@egen*/
  < MULTI >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Dividido() : {/*@bgen(jjtree) Dividido */
  SimpleNode jjtn000 = new SimpleNode(JJTDIVIDIDO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Dividido */
  try {
/*@egen*/
  < DIVISAO >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Numero() : {/*@bgen(jjtree) Numero */
  SimpleNode jjtn000 = new SimpleNode(JJTNUMERO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Numero */
  try {
/*@egen*/
  < DECIMAL >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void IgualIgual() : {/*@bgen(jjtree) IgualIgual */
  SimpleNode jjtn000 = new SimpleNode(JJTIGUALIGUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IgualIgual */
  try {
/*@egen*/
  < IGUAL_LOG >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Diferente() : {/*@bgen(jjtree) Diferente */
  SimpleNode jjtn000 = new SimpleNode(JJTDIFERENTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Diferente */
  try {
/*@egen*/
  < DIFERENTE >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void MenorIgual() : {/*@bgen(jjtree) MenorIgual */
  SimpleNode jjtn000 = new SimpleNode(JJTMENORIGUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MenorIgual */
  try {
/*@egen*/
  < MENOR_IGUAL >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void MaiorIgual() : {/*@bgen(jjtree) MaiorIgual */
  SimpleNode jjtn000 = new SimpleNode(JJTMAIORIGUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MaiorIgual */
  try {
/*@egen*/
  < MAIOR_IGUAL >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Menor() : {/*@bgen(jjtree) Menor */
  SimpleNode jjtn000 = new SimpleNode(JJTMENOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Menor */
  try {
/*@egen*/
  < MENOR >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Maior() : {/*@bgen(jjtree) Maior */
  SimpleNode jjtn000 = new SimpleNode(JJTMAIOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Maior */
  try {
/*@egen*/
  < MAIOR >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void MaisIgual() : {/*@bgen(jjtree) MaisIgual */
  SimpleNode jjtn000 = new SimpleNode(JJTMAISIGUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MaisIgual */
  try {
/*@egen*/
  < MAIS_IGUAL >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void MenosIgual() : {/*@bgen(jjtree) MenosIgual */
  SimpleNode jjtn000 = new SimpleNode(JJTMENOSIGUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MenosIgual */
  try {
/*@egen*/
  < MENOS_IGUAL >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void MaisMais() : {/*@bgen(jjtree) MaisMais */
  SimpleNode jjtn000 = new SimpleNode(JJTMAISMAIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MaisMais */
  try {
/*@egen*/
  < INCREMENTO >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void MenosMenos() : {/*@bgen(jjtree) MenosMenos */
  SimpleNode jjtn000 = new SimpleNode(JJTMENOSMENOS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MenosMenos */
  try {
/*@egen*/
  < DECREMENTO >/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}