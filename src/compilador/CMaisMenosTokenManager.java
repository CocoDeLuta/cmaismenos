/* CMaisMenosTokenManager.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. CMaisMenosTokenManager.java */
package compilador;
import recovery.*;

/** Token Manager. */
@SuppressWarnings ("unused")
public class CMaisMenosTokenManager implements CMaisMenosConstants {

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x2L) != 0L)
            return 50;
         if ((active0 & 0x3f320L) != 0L)
         {
            jjmatchedKind = 20;
            return 2;
         }
         return -1;
      case 1:
         if ((active0 & 0x3f320L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 1;
            return 2;
         }
         return -1;
      case 2:
         if ((active0 & 0x3f320L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 2;
            return 2;
         }
         return -1;
      case 3:
         if ((active0 & 0x37320L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 3;
            return 2;
         }
         if ((active0 & 0x8000L) != 0L)
            return 2;
         return -1;
      case 4:
         if ((active0 & 0x37320L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 4;
            return 2;
         }
         return -1;
      case 5:
         if ((active0 & 0x37120L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 5;
            return 2;
         }
         if ((active0 & 0x200L) != 0L)
            return 2;
         return -1;
      case 6:
         if ((active0 & 0x20000L) != 0L)
            return 2;
         if ((active0 & 0x17120L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 6;
            return 2;
         }
         return -1;
      case 7:
         if ((active0 & 0x10120L) != 0L)
            return 2;
         if ((active0 & 0x7000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 7;
            return 2;
         }
         return -1;
      case 8:
         if ((active0 & 0x7000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 8;
            return 2;
         }
         return -1;
      case 9:
         if ((active0 & 0x1000L) != 0L)
            return 2;
         if ((active0 & 0x6000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 9;
            return 2;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 32:
         return jjStartNfaWithStates_0(0, 1, 50);
      case 40:
         return jjStopAtPos(0, 10);
      case 41:
         return jjStopAtPos(0, 11);
      case 44:
         return jjStopAtPos(0, 7);
      case 59:
         return jjStopAtPos(0, 6);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x10000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x200L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x2000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x4000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x20L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x1000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x8000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x100L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x20000L);
      default :
         return jjMoveNfa_0(1, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x26020L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x24000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x8100L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x20L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 15, 2);
         break;
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x1220L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x30000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x2100L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x21000L);
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0x200L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x100L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x4020L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x12000L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L);
      case 111:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 9, 2);
         break;
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x100L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L);
      case 120:
         return jjMoveStringLiteralDfa6_0(active0, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x20L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000L);
      case 101:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 17, 2);
         break;
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(7, 16, 2);
         return jjMoveStringLiteralDfa8_0(active0, 0x4000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x3000L);
      case 111:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(7, 8, 2);
         break;
      case 115:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(7, 5, 2);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0x3000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(9, 12, 2);
         break;
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000L);
      case 115:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(10, 13, 2);
         break;
      case 115:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(10, 14, 2);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 88;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 50:
                  if (curChar == 61)
                     { jjCheckNAdd(48); }
                  else if (curChar == 47)
                     { jjCheckNAdd(11); }
                  else if (curChar == 42)
                     { jjCheckNAdd(8); }
                  else if (curChar == 45)
                     { jjCheckNAdd(43); }
                  else if (curChar == 43)
                     { jjCheckNAdd(35); }
                  else if (curChar == 62)
                     { jjCheckNAdd(27); }
                  else if (curChar == 60)
                     { jjCheckNAdd(22); }
                  else if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 54;
                  if (curChar == 61)
                  {
                     if (kind > 36)
                        kind = 36;
                  }
                  else if (curChar == 47)
                  {
                     if (kind > 35)
                        kind = 35;
                  }
                  else if (curChar == 42)
                  {
                     if (kind > 34)
                        kind = 34;
                  }
                  else if (curChar == 45)
                  {
                     if (kind > 33)
                        kind = 33;
                  }
                  else if (curChar == 43)
                  {
                     if (kind > 32)
                        kind = 32;
                  }
                  else if (curChar == 62)
                  {
                     if (kind > 27)
                        kind = 27;
                  }
                  else if (curChar == 60)
                  {
                     if (kind > 26)
                        kind = 26;
                  }
                  else if (curChar == 33)
                     { jjCheckNAdd(15); }
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 76;
                  else if (curChar == 43)
                     jjstateSet[jjnewStateCnt++] = 73;
                  else if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 60;
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 57;
                  else if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 51;
                  if (curChar == 45)
                     { jjCheckNAdd(40); }
                  else if (curChar == 43)
                     { jjCheckNAdd(32); }
                  else if (curChar == 62)
                     { jjCheckNAdd(24); }
                  else if (curChar == 60)
                     { jjCheckNAdd(19); }
                  else if (curChar == 61)
                     { jjCheckNAdd(45); }
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 70;
                  else if (curChar == 43)
                     jjstateSet[jjnewStateCnt++] = 67;
                  if (curChar == 45)
                     { jjCheckNAdd(37); }
                  else if (curChar == 43)
                     { jjCheckNAdd(29); }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 18)
                        kind = 18;
                     { jjCheckNAdd(0); }
                  }
                  else if (curChar == 32)
                     { jjAddStates(0, 29); }
                  else if (curChar == 61)
                     { jjCheckNAddStates(30, 32); }
                  else if (curChar == 45)
                     { jjCheckNAddStates(33, 37); }
                  else if (curChar == 43)
                     { jjCheckNAddStates(38, 42); }
                  else if (curChar == 62)
                     { jjCheckNAddStates(43, 45); }
                  else if (curChar == 60)
                     { jjCheckNAddStates(46, 48); }
                  else if (curChar == 33)
                     { jjCheckNAddTwoStates(15, 17); }
                  else if (curChar == 47)
                     { jjCheckNAdd(11); }
                  else if (curChar == 42)
                     { jjCheckNAdd(8); }
                  if (curChar == 61)
                  {
                     if (kind > 36)
                        kind = 36;
                  }
                  else if (curChar == 47)
                  {
                     if (kind > 35)
                        kind = 35;
                  }
                  else if (curChar == 42)
                  {
                     if (kind > 34)
                        kind = 34;
                  }
                  else if (curChar == 45)
                  {
                     if (kind > 33)
                        kind = 33;
                  }
                  else if (curChar == 43)
                  {
                     if (kind > 32)
                        kind = 32;
                  }
                  else if (curChar == 62)
                  {
                     if (kind > 27)
                        kind = 27;
                  }
                  else if (curChar == 60)
                  {
                     if (kind > 26)
                        kind = 26;
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 18)
                     kind = 18;
                  { jjCheckNAdd(0); }
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 3:
                  if (curChar == 60 && kind > 26)
                     kind = 26;
                  break;
               case 4:
                  if (curChar == 62 && kind > 27)
                     kind = 27;
                  break;
               case 5:
                  if (curChar == 43 && kind > 32)
                     kind = 32;
                  break;
               case 6:
                  if (curChar == 45 && kind > 33)
                     kind = 33;
                  break;
               case 7:
                  if (curChar == 42 && kind > 34)
                     kind = 34;
                  break;
               case 8:
                  if (curChar == 32 && kind > 34)
                     kind = 34;
                  break;
               case 9:
                  if (curChar == 42)
                     { jjCheckNAdd(8); }
                  break;
               case 10:
                  if (curChar == 47 && kind > 35)
                     kind = 35;
                  break;
               case 11:
                  if (curChar == 32 && kind > 35)
                     kind = 35;
                  break;
               case 12:
                  if (curChar == 47)
                     { jjCheckNAdd(11); }
                  break;
               case 13:
                  if (curChar == 61 && kind > 36)
                     kind = 36;
                  break;
               case 14:
                  if (curChar == 33)
                     { jjCheckNAddTwoStates(15, 17); }
                  break;
               case 15:
                  if (curChar == 61 && kind > 23)
                     kind = 23;
                  break;
               case 16:
                  if (curChar == 32 && kind > 23)
                     kind = 23;
                  break;
               case 17:
               case 54:
                  if (curChar == 61)
                     { jjCheckNAdd(16); }
                  break;
               case 18:
                  if (curChar == 60)
                     { jjCheckNAddStates(46, 48); }
                  break;
               case 19:
                  if (curChar == 61 && kind > 24)
                     kind = 24;
                  break;
               case 20:
                  if (curChar == 32 && kind > 24)
                     kind = 24;
                  break;
               case 21:
               case 57:
                  if (curChar == 61)
                     { jjCheckNAdd(20); }
                  break;
               case 22:
                  if (curChar == 32 && kind > 26)
                     kind = 26;
                  break;
               case 23:
                  if (curChar == 62)
                     { jjCheckNAddStates(43, 45); }
                  break;
               case 24:
                  if (curChar == 61 && kind > 25)
                     kind = 25;
                  break;
               case 25:
                  if (curChar == 32 && kind > 25)
                     kind = 25;
                  break;
               case 26:
               case 60:
                  if (curChar == 61)
                     { jjCheckNAdd(25); }
                  break;
               case 27:
                  if (curChar == 32 && kind > 27)
                     kind = 27;
                  break;
               case 28:
                  if (curChar == 43)
                     { jjCheckNAddStates(38, 42); }
                  break;
               case 29:
                  if (curChar == 43 && kind > 28)
                     kind = 28;
                  break;
               case 30:
                  if (curChar == 32 && kind > 28)
                     kind = 28;
                  break;
               case 31:
               case 67:
                  if (curChar == 43)
                     { jjCheckNAdd(30); }
                  break;
               case 32:
                  if (curChar == 61 && kind > 30)
                     kind = 30;
                  break;
               case 33:
                  if (curChar == 32 && kind > 30)
                     kind = 30;
                  break;
               case 34:
               case 73:
                  if (curChar == 61)
                     { jjCheckNAdd(33); }
                  break;
               case 35:
                  if (curChar == 32 && kind > 32)
                     kind = 32;
                  break;
               case 36:
                  if (curChar == 45)
                     { jjCheckNAddStates(33, 37); }
                  break;
               case 37:
                  if (curChar == 45 && kind > 29)
                     kind = 29;
                  break;
               case 38:
                  if (curChar == 32 && kind > 29)
                     kind = 29;
                  break;
               case 39:
               case 70:
                  if (curChar == 45)
                     { jjCheckNAdd(38); }
                  break;
               case 40:
                  if (curChar == 61 && kind > 31)
                     kind = 31;
                  break;
               case 41:
                  if (curChar == 32 && kind > 31)
                     kind = 31;
                  break;
               case 42:
               case 76:
                  if (curChar == 61)
                     { jjCheckNAdd(41); }
                  break;
               case 43:
                  if (curChar == 32 && kind > 33)
                     kind = 33;
                  break;
               case 44:
                  if (curChar == 61)
                     { jjCheckNAddStates(30, 32); }
                  break;
               case 45:
                  if (curChar == 61 && kind > 22)
                     kind = 22;
                  break;
               case 46:
                  if (curChar == 32 && kind > 22)
                     kind = 22;
                  break;
               case 47:
               case 51:
                  if (curChar == 61)
                     { jjCheckNAdd(46); }
                  break;
               case 48:
                  if (curChar == 32 && kind > 36)
                     kind = 36;
                  break;
               case 49:
                  if (curChar == 32)
                     { jjAddStates(0, 29); }
                  break;
               case 52:
                  if (curChar == 61)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if (curChar == 33)
                     { jjCheckNAdd(15); }
                  break;
               case 55:
                  if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if (curChar == 60)
                     { jjCheckNAdd(19); }
                  break;
               case 58:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 62)
                     { jjCheckNAdd(24); }
                  break;
               case 61:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if (curChar == 60 && kind > 26)
                     kind = 26;
                  break;
               case 63:
                  if (curChar == 60)
                     { jjCheckNAdd(22); }
                  break;
               case 64:
                  if (curChar == 62 && kind > 27)
                     kind = 27;
                  break;
               case 65:
                  if (curChar == 62)
                     { jjCheckNAdd(27); }
                  break;
               case 66:
                  if (curChar == 43)
                     { jjCheckNAdd(29); }
                  break;
               case 68:
                  if (curChar == 43)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 45)
                     { jjCheckNAdd(37); }
                  break;
               case 71:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 43)
                     { jjCheckNAdd(32); }
                  break;
               case 74:
                  if (curChar == 43)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if (curChar == 45)
                     { jjCheckNAdd(40); }
                  break;
               case 77:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 78:
                  if (curChar == 43 && kind > 32)
                     kind = 32;
                  break;
               case 79:
                  if (curChar == 43)
                     { jjCheckNAdd(35); }
                  break;
               case 80:
                  if (curChar == 45 && kind > 33)
                     kind = 33;
                  break;
               case 81:
                  if (curChar == 45)
                     { jjCheckNAdd(43); }
                  break;
               case 82:
                  if (curChar == 42 && kind > 34)
                     kind = 34;
                  break;
               case 83:
                  if (curChar == 42)
                     { jjCheckNAdd(8); }
                  break;
               case 84:
                  if (curChar == 47 && kind > 35)
                     kind = 35;
                  break;
               case 85:
                  if (curChar == 47)
                     { jjCheckNAdd(11); }
                  break;
               case 86:
                  if (curChar == 61 && kind > 36)
                     kind = 36;
                  break;
               case 87:
                  if (curChar == 61)
                     { jjCheckNAdd(48); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 2:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 20)
                     kind = 20;
                  { jjCheckNAdd(2); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 88 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, "\156\141\163\143\157\170\141\163", "\73", "\54", 
"\164\151\160\157\151\163\163\157", "\145\165\141\143\150\157", "\50", "\51", 
"\160\157\165\143\141\143\157\151\163\141", "\146\141\154\157\165\145\144\151\163\163\145", 
"\155\141\151\163\157\165\155\145\156\157\163", "\163\145\160\141", "\141\143\157\156\164\145\143\145", 
"\166\141\151\156\141\146\145", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, };
static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   50, 52, 53, 55, 56, 58, 59, 61, 62, 63, 64, 65, 66, 68, 69, 71, 
   72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 45, 47, 
   48, 37, 39, 40, 42, 43, 29, 31, 32, 34, 35, 24, 26, 27, 19, 21, 
   22, 
};

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 13 && (0x2600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public CMaisMenosTokenManager(SimpleCharStream stream){

      if (input_stream != null)
        throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);

    input_stream = stream;
  }

  /** Constructor. */
  public CMaisMenosTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  static public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  static private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 88; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  static public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public static void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x1fffd7ffe1L, 
};
static final long[] jjtoSkip = {
   0x1eL, 
};
static final long[] jjtoSpecial = {
   0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 
};
    static protected SimpleCharStream  input_stream;

    static private final int[] jjrounds = new int[88];
    static private final int[] jjstateSet = new int[2 * 88];
    private static final StringBuilder jjimage = new StringBuilder();
    private static StringBuilder image = jjimage;
    private static int jjimageLen;
    private static int lengthOfMatch;
    static protected int curChar;
}
