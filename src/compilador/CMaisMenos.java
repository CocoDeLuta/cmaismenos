/* CMaisMenos.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. CMaisMenos.java */
package compilador;
import recovery.*;

public class CMaisMenos/*@bgen(jjtree)*/implements CMaisMenosTreeConstants, CMaisMenosConstants {/*@bgen(jjtree)*/
  protected static JJTCMaisMenosState jjtree = new JJTCMaisMenosState();public static void main(String args []) throws ParseException
  {
    CMaisMenos parser = new CMaisMenos(System.in);
    while (true)
    {
      System.out.println("Escreve alguma coisa ai");
      System.out.print("Escreve tipo: nascoxas algo tipoassim maisoumenos isso euacho");
      System.out.println(" ");

          SimpleNode node = CMaisMenos.main();
      System.out.println("A arvore do programa ficou assim:");
      node.dump(" -> ");
      try
      {
          System.out.println(" ");
          System.out.println("Pode ser.");
        /*switch (CMaisMenos.main())
        {
          case 0 : 
          break;
          case 1 : 
          System.out.println("Vai pela sombra.");
          break;
          default : 
          break;
        }*/
      }
      catch (Exception e)
      {
        System.out.println(" ");
        System.out.println("Acho que n\u00e3o.");
        System.out.println(e.getMessage());
        CMaisMenos.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("PUTZ.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }

        static public String im(int x)
  {
    int k;
        String s;
    s = tokenImage[x];
    k = s.lastIndexOf("\"");
    try {
      s = s.substring(1,k);
    }
   catch (StringIndexOutOfBoundsException e)
           {}
   return s;
  }

  static public  Token lastError = null;
  static public  Token firstErrorToken = null;
  private static boolean eof ;    // variável que indica se EOF foi alcançado

  // o método abaixo consome tokens até alcançar um que pertença ao conjunto
  // de sincronização
  static void consumeUntil(RecoverySet g,
                         ParseException e,
                         String met) throws ParseEOFException,
                                            ParseException
  {
        Token tok;
        System.out.println();
        System.out.println("*** " + met + " ***");
        System.out.println("     Conjunto de sincroniza\u00e7\u00e3o: " + g);

        if (g == null) throw e; // se o conjunto é null, propaga a exceção

        tok = getToken(1); // pega token corrente
        if (firstErrorToken == null) {
        firstErrorToken = tok; // armazena o primeiro token do erro
    }
        while ( ! isEof() ) { // se não chegou ao fim do arquivo
          if ( g.contains(tok.kind)) {//achou um token no conjunto
            System.out.println("     Encontrado token de sincroniza\u00e7\u00e3o: " +
                               im(tok.kind));
            break;
          }
          System.out.println("     Ignorando o token: " + im(tok.kind));
          getNextToken();     // pega próximo token       
      tok = getToken(1);
          if (tok.kind == EOF && ! g.contains(EOF) ) // fim da entrada?   
              setEof(true);
        }
    if ( tok != lastError)  {
          System.out.println(e.getMessage());
          lastError = tok;

        }
        if ( isEof() )
          throw new ParseEOFException("Encontrei EOF onde n\u00e3o deveria.");
  }

  static final public SimpleNode main() throws ParseException {/*@bgen(jjtree) main */
 SimpleNode jjtn000 = new SimpleNode(JJTMAIN);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.main;
    try {
      try {
        NasCoxas();
        Id();
        TipoIsso();
        Comandos();
        EuAcho();
{if ("" != null) return jjtn000;}
      } catch (ParseException e) {
consumeUntil(sinc, e, "Main");
    {if ("" != null) return null;}
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
}

  static final public void Comandos() throws ParseException {/*@bgen(jjtree) Comandos */
 SimpleNode jjtn000 = new SimpleNode(JJTCOMANDOS);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.comandos;
    try {
      try {
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case TIPOINTEIRO:
          case TIPOFLOAT:
          case TIPOBOOL:
          case SEPA:
          case ACONTECE:
          case VAINAFE:
          case ID:{
            ;
            break;
            }
          default:
            jj_la1[0] = jj_gen;
            break label_1;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case TIPOINTEIRO:
          case TIPOFLOAT:
          case TIPOBOOL:{
            DeclaraVariavel();
            break;
            }
          case ID:{
            AtribuiValor();
            break;
            }
          case SEPA:{
            If();
            break;
            }
          case ACONTECE:{
            While();
            break;
            }
          case VAINAFE:{
            For();
            break;
            }
          default:
            jj_la1[1] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (ParseException e) {
consumeUntil(sinc, e, "Comandos");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void DeclaraVariavel() throws ParseException {/*@bgen(jjtree) DeclaraVariavel */
 SimpleNode jjtn000 = new SimpleNode(JJTDECLARAVARIAVEL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.declaraVariavel;
    try {
      try {
        TipoVariavel();
        Id();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IGUAL:{
          Igual();
          Expressao();
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          ;
        }
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case VIRGULA:{
            ;
            break;
            }
          default:
            jj_la1[3] = jj_gen;
            break label_2;
          }
          Virgula();
          Id();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case IGUAL:{
            Igual();
            Expressao();
            break;
            }
          default:
            jj_la1[4] = jj_gen;
            ;
          }
        }
        PontoVirgula();
      } catch (ParseException e) {
consumeUntil(sinc, e, "Declara\u00e7\u00e3o de vari\u00e1vel");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void DeclaraVariavelFor() throws ParseException {/*@bgen(jjtree) DeclaraVariavelFor */
 SimpleNode jjtn000 = new SimpleNode(JJTDECLARAVARIAVELFOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.declaraVariavelFor;
    try {
      try {
        TipoVariavel();
        Id();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IGUAL:{
          Igual();
          Expressao();
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          ;
        }
      } catch (ParseException e) {
consumeUntil(sinc, e, "Declara\u00e7\u00e3o de vari\u00e1vel para for");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void TipoVariavel() throws ParseException {/*@bgen(jjtree) TipoVariavel */
 SimpleNode jjtn000 = new SimpleNode(JJTTIPOVARIAVEL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.tipoVariavel;
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TIPOINTEIRO:{
          PoucaCoisa();
          break;
          }
        case TIPOFLOAT:{
          FaloueDisse();
          break;
          }
        case TIPOBOOL:{
          MaisOuMenos();
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
consumeUntil(sinc, e, "Tipo de vari\u00e1vel");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void OperadorMatematico() throws ParseException {/*@bgen(jjtree) OperadorMatematico */
 SimpleNode jjtn000 = new SimpleNode(JJTOPERADORMATEMATICO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.operadorMatematico;
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MAIS:{
          Mais();
          break;
          }
        case MENOS:{
          Menos();
          break;
          }
        case MULTI:{
          Multiplicado();
          break;
          }
        case DIVISAO:{
          Dividido();
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
consumeUntil(sinc, e, "Operador matem\u00e1tico");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void OperadorLogico() throws ParseException {/*@bgen(jjtree) OperadorLogico */
 SimpleNode jjtn000 = new SimpleNode(JJTOPERADORLOGICO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.operadorLogico;
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IGUAL_LOG:{
          IgualIgual();
          break;
          }
        case DIFERENTE:{
          Diferente();
          break;
          }
        case MENOR_IGUAL:{
          MenorIgual();
          break;
          }
        case MAIOR_IGUAL:{
          MaiorIgual();
          break;
          }
        case MENOR:{
          Menor();
          break;
          }
        case MAIOR:{
          Maior();
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
consumeUntil(sinc, e, "Operador l\u00f3gico");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void Expressao() throws ParseException {/*@bgen(jjtree) Expressao */
 SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSAO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.expressao;
    try {
      try {
        Termo();
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case MAIS:
          case MENOS:
          case MULTI:
          case DIVISAO:{
            ;
            break;
            }
          default:
            jj_la1[9] = jj_gen;
            break label_3;
          }
          OperadorMatematico();
          Termo();
        }
      } catch (ParseException e) {
consumeUntil(sinc, e, "Express\u00e3o matem\u00e1tica");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void ExpressaoLogica() throws ParseException {/*@bgen(jjtree) ExpressaoLogica */
 SimpleNode jjtn000 = new SimpleNode(JJTEXPRESSAOLOGICA);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.expressaoLogica;
    try {
      try {
        Expressao();
        OperadorLogico();
        Expressao();
      } catch (ParseException e) {
consumeUntil(sinc, e, "Express\u00e3o l\u00f3gica");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void Termo() throws ParseException {/*@bgen(jjtree) Termo */
 SimpleNode jjtn000 = new SimpleNode(JJTTERMO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.termo;
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ABREPAR:{
          AbrePar();
          Expressao();
          FechaPar();
          break;
          }
        case MENOS:{
          Menos();
          Termo();
          break;
          }
        case ID:{
          Id();
          break;
          }
        case DECIMAL:{
          Numero();
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
consumeUntil(sinc, e, "Termo");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void AtribuiValor() throws ParseException {/*@bgen(jjtree) AtribuiValor */
 SimpleNode jjtn000 = new SimpleNode(JJTATRIBUIVALOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.atribuiValor;
    try {
      try {
        Id();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IGUAL:{
          Igual();
          break;
          }
        case MAIS_IGUAL:{
          MaisIgual();
          break;
          }
        case MENOS_IGUAL:{
          MenosIgual();
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        Expressao();
        PontoVirgula();
      } catch (ParseException e) {
consumeUntil(sinc, e, "Atribui\u00e7\u00e3o de valor");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void If() throws ParseException {/*@bgen(jjtree) If */
 SimpleNode jjtn000 = new SimpleNode(JJTIF);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.sepaIf;
    try {
      try {
        Sepa();
        AbrePar();
        ExpressaoLogica();
        FechaPar();
        TipoIsso();
        Comandos();
        EuAcho();
      } catch (ParseException e) {
consumeUntil(sinc, e, "Sepa");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void While() throws ParseException {/*@bgen(jjtree) While */
 SimpleNode jjtn000 = new SimpleNode(JJTWHILE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.aconteceWhile;
    try {
      try {
        Acontece();
        AbrePar();
        ExpressaoLogica();
        FechaPar();
        TipoIsso();
        Comandos();
        EuAcho();
      } catch (ParseException e) {
consumeUntil(sinc, e, "Acontece");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void For() throws ParseException {/*@bgen(jjtree) For */
 SimpleNode jjtn000 = new SimpleNode(JJTFOR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.vainafeFor;
    try {
      try {
        Vainafe();
        AbrePar();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TIPOINTEIRO:
        case TIPOFLOAT:
        case TIPOBOOL:{
          DeclaraVariavelFor();
          break;
          }
        case ID:{
          Id();
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        PontoVirgula();
        ExpressaoLogica();
        PontoVirgula();
        IncrementoOuDecremento();
        FechaPar();
        TipoIsso();
        Comandos();
        EuAcho();
      } catch (ParseException e) {
consumeUntil(sinc, e, "Vainafe");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void IncrementoOuDecremento() throws ParseException {/*@bgen(jjtree) IncrementoOuDecremento */
 SimpleNode jjtn000 = new SimpleNode(JJTINCREMENTOOUDECREMENTO);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);RecoverySet sinc = Follow.incDec;
    try {
      try {
        Id();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INCREMENTO:{
          MaisMais();
          break;
          }
        case DECREMENTO:{
          MenosMenos();
          break;
          }
        case MAIS_IGUAL:{
          MaisIgual();
          Expressao();
          break;
          }
        case MENOS_IGUAL:{
          MenosIgual();
          Expressao();
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
consumeUntil(sinc, e, "Incremento ou Decremento");
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

// SEM FOLLOW A PARTIR DAQUI
// METODO PRA CADA TOKEN PRA ARVORE
// NÃO É A MANEIRA CORRETA E MAIS EFICIENTE MAS PARA FINS DE VISUALIZAÇÃO SERVE
  static final public 
void NasCoxas() throws ParseException {/*@bgen(jjtree) NasCoxas */
  SimpleNode jjtn000 = new SimpleNode(JJTNASCOXAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INICIOPROGRAMA);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void PontoVirgula() throws ParseException {/*@bgen(jjtree) PontoVirgula */
  SimpleNode jjtn000 = new SimpleNode(JJTPONTOVIRGULA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(PONTOVIRGULA);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void Virgula() throws ParseException {/*@bgen(jjtree) Virgula */
  SimpleNode jjtn000 = new SimpleNode(JJTVIRGULA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(VIRGULA);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void TipoIsso() throws ParseException {/*@bgen(jjtree) TipoIsso */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPOISSO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ABREBLOCO);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void EuAcho() throws ParseException {/*@bgen(jjtree) EuAcho */
  SimpleNode jjtn000 = new SimpleNode(JJTEUACHO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FECHABLOCO);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void AbrePar() throws ParseException {/*@bgen(jjtree) AbrePar */
  SimpleNode jjtn000 = new SimpleNode(JJTABREPAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ABREPAR);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  static final public void FechaPar() throws ParseException {/*@bgen(jjtree) FechaPar */
  SimpleNode jjtn000 = new SimpleNode(JJTFECHAPAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FECHAPAR);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  static final public void Igual() throws ParseException {/*@bgen(jjtree) Igual */
  SimpleNode jjtn000 = new SimpleNode(JJTIGUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IGUAL);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  static final public void Sepa() throws ParseException {/*@bgen(jjtree) Sepa */
  SimpleNode jjtn000 = new SimpleNode(JJTSEPA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(SEPA);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  static final public void Acontece() throws ParseException {/*@bgen(jjtree) Acontece */
  SimpleNode jjtn000 = new SimpleNode(JJTACONTECE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ACONTECE);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  static final public void Vainafe() throws ParseException {/*@bgen(jjtree) Vainafe */
  SimpleNode jjtn000 = new SimpleNode(JJTVAINAFE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(VAINAFE);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
}

  static final public void Id() throws ParseException {/*@bgen(jjtree) Id */
  SimpleNode jjtn000 = new SimpleNode(JJTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(ID);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void Menos() throws ParseException {/*@bgen(jjtree) Menos */
  SimpleNode jjtn000 = new SimpleNode(JJTMENOS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MENOS);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void PoucaCoisa() throws ParseException {/*@bgen(jjtree) PoucaCoisa */
  SimpleNode jjtn000 = new SimpleNode(JJTPOUCACOISA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TIPOINTEIRO);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void FaloueDisse() throws ParseException {/*@bgen(jjtree) FaloueDisse */
  SimpleNode jjtn000 = new SimpleNode(JJTFALOUEDISSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TIPOFLOAT);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void MaisOuMenos() throws ParseException {/*@bgen(jjtree) MaisOuMenos */
  SimpleNode jjtn000 = new SimpleNode(JJTMAISOUMENOS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(TIPOBOOL);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void Mais() throws ParseException {/*@bgen(jjtree) Mais */
  SimpleNode jjtn000 = new SimpleNode(JJTMAIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MAIS);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void Multiplicado() throws ParseException {/*@bgen(jjtree) Multiplicado */
  SimpleNode jjtn000 = new SimpleNode(JJTMULTIPLICADO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MULTI);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void Dividido() throws ParseException {/*@bgen(jjtree) Dividido */
  SimpleNode jjtn000 = new SimpleNode(JJTDIVIDIDO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DIVISAO);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void Numero() throws ParseException {/*@bgen(jjtree) Numero */
  SimpleNode jjtn000 = new SimpleNode(JJTNUMERO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DECIMAL);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void IgualIgual() throws ParseException {/*@bgen(jjtree) IgualIgual */
  SimpleNode jjtn000 = new SimpleNode(JJTIGUALIGUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IGUAL_LOG);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void Diferente() throws ParseException {/*@bgen(jjtree) Diferente */
  SimpleNode jjtn000 = new SimpleNode(JJTDIFERENTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DIFERENTE);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void MenorIgual() throws ParseException {/*@bgen(jjtree) MenorIgual */
  SimpleNode jjtn000 = new SimpleNode(JJTMENORIGUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MENOR_IGUAL);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void MaiorIgual() throws ParseException {/*@bgen(jjtree) MaiorIgual */
  SimpleNode jjtn000 = new SimpleNode(JJTMAIORIGUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MAIOR_IGUAL);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void Menor() throws ParseException {/*@bgen(jjtree) Menor */
  SimpleNode jjtn000 = new SimpleNode(JJTMENOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MENOR);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void Maior() throws ParseException {/*@bgen(jjtree) Maior */
  SimpleNode jjtn000 = new SimpleNode(JJTMAIOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MAIOR);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void MaisIgual() throws ParseException {/*@bgen(jjtree) MaisIgual */
  SimpleNode jjtn000 = new SimpleNode(JJTMAISIGUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MAIS_IGUAL);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void MenosIgual() throws ParseException {/*@bgen(jjtree) MenosIgual */
  SimpleNode jjtn000 = new SimpleNode(JJTMENOSIGUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MENOS_IGUAL);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void MaisMais() throws ParseException {/*@bgen(jjtree) MaisMais */
  SimpleNode jjtn000 = new SimpleNode(JJTMAISMAIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(INCREMENTO);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static final public void MenosMenos() throws ParseException {/*@bgen(jjtree) MenosMenos */
  SimpleNode jjtn000 = new SimpleNode(JJTMENOSMENOS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DECREMENTO);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CMaisMenosTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[14];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x13f000,0x13f000,0x0,0x80,0x0,0x0,0x7000,0x0,0xfc00000,0x0,0x140400,0xc0000000,0x107000,0xf0000000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x0,0x0,0x10,0x0,0x10,0x10,0x0,0xf,0x0,0xf,0x2,0x10,0x0,0x0,};
	}

  /** Constructor with InputStream. */
  public CMaisMenos(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CMaisMenos(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new CMaisMenosTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public CMaisMenos(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new CMaisMenosTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new CMaisMenosTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public CMaisMenos(CMaisMenosTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CMaisMenosTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[37];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 14; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 37; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

/**
 * @return the eof
 */
public static boolean isEof() {
	return eof;
}

/**
 * @param eof the eof to set
 */
public static void setEof(boolean eof) {
	CMaisMenos.eof = eof;
}

}
